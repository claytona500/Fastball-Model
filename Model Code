library(caret)
library(randomForest)
library(tidyverse)
library(Boruta)
library(gt)

# Load and preprocess data
load_and_preprocess_data <- function(file_path) {
  data <- read_csv(file_path)
  # Replace spaces in column names with underscores
  names(data) <- gsub(" ", "_", names(data))
  data <- data %>%
    na.omit() %>%
    mutate(Pitcher_throws = factor(Pitcher_throws, levels = c("RHP", "LHP"))) %>%
    group_by(Name, Pitcher_throws) %>%
    summarize(across(active_spin:Vz0, median), .groups = "drop")
  
  data$Release_Pos_Z = data$`Release_Pos_Z_(fixed)`
  data$Release_Pos_X = data$`Release_Pos_X_(fixed)`
    
  data <- data %>% 
     select(-`VAA_AA,_pitch_type`, -`Release_Pos_Z_(fixed)`, -`Release_Pos_X_(fixed)`)
  
  return(data)
}

# Feature selection with Boruta
feature_selection <- function(data, formula) {
  boruta_fs <- Boruta(formula, data = data)
  print(boruta_fs)
  plot(boruta_fs, xlab = "", ylab = "")
  
  # Add variable names to the plot
  all_names <- colnames(data[, -1])
  text(x = 1:length(all_names), y = -0.5, labels = all_names, xpd = NA, srt = 90, adj = 1, cex = 0.8)
  
  return(boruta_fs)
}


# Train models with k-fold cross-validation
train_models_with_cv <- function(data, formula_v, formula_h, k = 10) {
  # Set up cross-validation
  control <- trainControl(method = "cv", number = k)
  
  # Set up parameter grid with mtry=9
  tune_grid <- expand.grid(.mtry = 9)
  
  # Train models with mtry=9
  ivb_model <- train(formula_v, data = data, trControl = control, tuneGrid = tune_grid)
  ihb_model <- train(formula_h, data = data, trControl = control, tuneGrid = tune_grid)
  
  return(list(ivb_model, ihb_model))
}

print_boruta_importance <- function(data, boruta_output) {
  selected_attributes <- getSelectedAttributes(boruta_output)
  importance_values <- boruta_output$ImpHistory[which(boruta_output$finalDecision == "Confirmed"), ]
  if (length(selected_attributes) != ncol(importance_values)) {
    importance_values <- importance_values[, selected_attributes]
  }
  importance_df <- data.frame(attribute = selected_attributes, importance = colMeans(importance_values))
  importance_df <- importance_df[order(importance_df$importance, decreasing = TRUE), ]
  return(importance_df)
}


# Main code
dash_2021 <- load_and_preprocess_data("~/Downloads/2021_pitch_characteristics.csv")
dash_2022 <- load_and_preprocess_data("~/Downloads/2022_pitch_characteristics.csv")

# Assuming dash_2021 is a data frame containing your variables
response_variables <- c("V_Mov", "H_Mov")

independent_variables <- setdiff(names(dash_2021), c("Name", response_variables))

# Collapse the independent variables into a single string with the '+' symbol
independent_variables_string <- paste(sapply(independent_variables, function(x) {
  if (grepl("[^[:alnum:]_]", x)) {
    paste0("`", x, "`")
  } else {
    x
  }
}), collapse = " + ")

# Create the formula for both H_Mov and V_Mov
#boruta_formula <- as.formula(paste0(paste(response_variables, collapse = " + "), " ~ ", independent_variables_string))
#Just Vertical or horizontal
boruta_formula <- as.formula(paste0("H_Mov", " ~ ", independent_variables_string))
#Just Horizontal
#boruta_formula <- as.formula(paste0(paste(response_variables, collapse = " + "), " ~ ", independent_variables_string))

boruta_fs_2021 <- feature_selection(dash_2021, boruta_formula)
print_boruta_importance(dash_2021, boruta_fs_2021)

# Extract the important variables from the Boruta output
important_vars <- getSelectedAttributes(boruta_fs_2021)

# Create a new string with important independent variables
important_variables_string <- paste(important_vars, collapse = " + ")

# Update your formulae to include only the important variables
train_formula_v <- as.formula(paste("V_Mov", " ~ ", important_variables_string))
#this is the horizontal movement formula. Commented out because doing only vertical

boruta_fs_2021 <- feature_selection(dash_2021, train_formula_v)

train_formula_h <- update(train_formula_v, H_Mov ~ .)

# Train models using 10-fold cross-validation
#formula for all aspects
models_with_cv <- train_models_with_cv(dash_2021, train_formula_v, train_formula_h )


ivb_model_with_cv <- models_with_cv[[1]]
ihb_model_with_cv <- models_with_cv[[2]]

# Access cross-validation results for IVB model
ivb_cv_results <- ivb_model_with_cv$results
print(ivb_cv_results)

# Access cross-validation results for IHB model
ihb_cv_results <- ihb_model_with_cv$results
print(ihb_cv_results)

# Make predictions
predictions_ivb <- predict(ivb_model_with_cv, dash_2022)
predictions_ihb <- predict(ihb_model_with_cv, dash_2022)

dash_2022 <- dash_2022 %>%
  mutate(xIVB = predictions_ivb,
         xHB = predictions_ihb,
         diffVB = V_Mov - xIVB,
         diffHB = H_Mov - xHB)

# Print dash_2022 with predictions and differences
print(dash_2022)

# Sort the data by the diffVB column in descending order
sorted_dash_2022 <- dash_2022 %>%
  arrange(desc(diffVB))

# Get the top 10 best performers
top_10_best <- sorted_dash_2022[1:10, ]

# Get the top 10 worst performers
top_10_worst <- sorted_dash_2022[(nrow(sorted_dash_2022) - 9):nrow(sorted_dash_2022), ]

# Combine the top 10 best and worst performers into one table
top_10_best_worst <- rbind(top_10_best, top_10_worst)

# Round the diffVB and xIVB columns to 2 decimal places
top_10_best <- top_10_best %>%
  mutate(
    xIVB = round(xIVB, 2),
    diffVB = round(diffVB, 2),
    active_spin = paste0(round(as.numeric(active_spin) * 100, 2), "%"),
    Name = gsub(",", "", Name) %>%  
      str_split(" ", 2) %>%
      lapply(rev) %>%
      lapply(paste, collapse = " ") %>%
      unlist()
  )


top_10_worst <- top_10_worst %>%
  mutate(
    xIVB = round(xIVB, 2),
    diffVB = round(diffVB, 2),
    active_spin = paste0(round(as.numeric(active_spin) * 100, 2), "%"),
    Name = gsub(",", "", Name) %>%  
      str_split(" ", 2) %>%
      lapply(rev) %>%
      lapply(paste, collapse = " ") %>%
      unlist()
  ) %>%
  arrange(diffVB)

best_table <- top_10_best %>%
  select(Name, V_Mov, xIVB, diffVB, active_spin) %>%
  gt() %>%
  tab_header(title = "Overachievers") %>%
  cols_label(
    Name = "Name",
    V_Mov = "IVB",
    xIVB = "xIVB",
    diffVB = "Difference",
    active_spin = "Spin Efficiency"
  ) %>%
  tab_style(
    style = cell_text(weight = "bold", size = "large", color = "white"),
    locations = cells_title()
  ) %>%
  tab_style(
    style = cell_text(weight = "bold", color = "white"),
    locations = cells_column_labels()
  ) %>%
  tab_style(
    style = cell_fill(color = "black"),
    locations = cells_title()
  ) %>%
  tab_style(
    style = cell_fill(color = "black"),
    locations = cells_column_labels()
  ) %>%
  tab_style(
    style = cell_text(color = "white"),
    locations = cells_body()
  ) %>%
  tab_style(
    style = cell_fill(color = "black"),
    locations = cells_body()
  ) %>%
  tab_options(
    table.font.names = "Times New Roman", # Replace "Arial" with your preferred font
    table.border.top.width = px(0),
    table.border.bottom.width = px(0),
    table.border.left.width = px(0),
    table.border.right.width = px(0)
  )

# Display the table in the console
print(best_table)

worst_table <- top_10_worst %>%
  select(Name, V_Mov, xIVB, diffVB, active_spin) %>%
  gt() %>%
  tab_header(title = "Underachievers") %>%
  cols_label(
    Name = "Name",
    V_Mov = "IVB",
    xIVB = "xIVB",
    diffVB = "Difference",
    active_spin = "Spin Efficiency"
  ) %>%
  tab_style(
    style = cell_text(weight = "bold", size = "large", color = "white"),
    locations = cells_title()
  ) %>%
  tab_style(
    style = cell_text(weight = "bold", color = "white"),
    locations = cells_column_labels()
  ) %>%
  tab_style(
    style = cell_fill(color = "black"),
    locations = cells_title()
  ) %>%
  tab_style(
    style = cell_fill(color = "black"),
    locations = cells_column_labels()
  ) %>%
  tab_style(
    style = cell_text(color = "white"),
    locations = cells_body()
  ) %>%
  tab_style(
    style = cell_fill(color = "black"),
    locations = cells_body()
  ) %>%
  tab_options(
    table.font.names = "Times New Roman", # Replace "Arial" with your preferred font
    table.border.top.width = px(0),
    table.border.bottom.width = px(0),
    table.border.left.width = px(0),
    table.border.right.width = px(0)
  )

# Display the table in the console
print(worst_table)
